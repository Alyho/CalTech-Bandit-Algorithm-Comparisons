# -*- coding: utf-8 -*-
"""
Created on Sat Oct 26 21:52:22 2019

@author: student-minecraft
"""
import numpy as np
import Coin_Environment as ce
import matplotlib.pyplot as plt
import scipy.io as io

#%%
#import time

#t1 = time.time()

pheads = np.array([0.52,0.5,0.55,0.47])
coin = ce.coin_environment(pheads)

repetition = 100 #make smaller
trials = 1000 #make bigger 
mean_every_trial = np.empty(33)
stdev_every_trial = np.empty(33)
data = []

for explore_trials in range (1, 34):
    exploit_trials = trials - len(pheads) * explore_trials
    total_every_trial = np.empty(repetition)
    
    for r in range(repetition):

        array = np.zeros(len(pheads))
        
        for i in range(1, len(pheads) + 1):
    
            for n in range (explore_trials):
        
                if (coin.flip(i) == "heads"):
                     array[i-1] += 1
        
        array2 = np.where(array == np.max(array))[0]
        best_coin = np.random.choice(array2) + 1
       
        total_number_of_heads = np.sum(array)
         
        for y in range (exploit_trials): 
    
            if(coin.flip(best_coin) == "heads"):
                total_number_of_heads += 1
            
        total_every_trial[r] = total_number_of_heads
        
    data.append(total_every_trial)
    
    mean_every_trial[explore_trials - 1] = np.mean(total_every_trial)
    stdev_every_trial[explore_trials - 1] = np.std(total_every_trial)

right_explore = np.argmax(mean_every_trial)
     
print ("Best number of explore trials"  +  " = " + str(right_explore + 1)) 

mean_right_explore = mean_every_trial[right_explore]
stdev_right_explore = stdev_every_trial[right_explore]

#%% saving data pheads
io.savemat("ExploreExploit" + str(pheads) + "_" + str(repetition) + "_" + str(trials) + "Data.mat", {"right_explore": right_explore, 
                                      "mean_right_explore": mean_right_explore, 
                                      "stdev_right_explore": stdev_right_explore})
    
#%%
# Make the figure:
plt.figure()

plt.boxplot(data)

# Add axis labels and a title:
plt.xlabel('Explore Trials')
plt.ylabel('Total Heads')
plt.title('Explore/Exploit Results')

# Make error bar plot (the blue line is the mean. The red shows one standard 
# deviation above the mean, and one standard deviation below the mean.):
plt.figure()

plt.errorbar(np.arange(1, 34), mean_every_trial, yerr = stdev_every_trial,
             fmt='-o', ecolor='orangered', capsize=2)

plt.xlabel('Explore Trials')
plt.ylabel('Total Heads')
plt.title('Explore/Exploit Results: Mean +/- Standard Deviation')
